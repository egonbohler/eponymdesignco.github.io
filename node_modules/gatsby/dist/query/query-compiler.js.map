{"version":3,"sources":["../../src/query/query-compiler.js"],"names":["normalize","require","levenshtein","_","boundActionCreators","websocketManager","printTransforms","IRTransforms","ValuesOfCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","validationRules","lastRunHadErrors","overlayErrorID","resolveThemes","themes","reduce","merged","theme","push","themeDir","Runner","constructor","base","additional","schema","reportError","message","queryErrorMessage","report","format","red","process","env","gatsby_executing_command","emitError","compileAll","nodes","parseEverything","write","filesRegex","path","join","files","concat","map","folderPath","glob","sync","nodir","filter","d","match","Array","from","store","getState","components","keys","c","uniq","parser","FileParser","parseFiles","compiledNodes","Map","namePathMap","nameDefMap","nameErrorMap","documents","filePath","doc","entries","errors","length","locationOfGraphQLDocInSourceFile","definitions","templateLoc","panicOnBuild","error","graphqlLocation","locations","location","start","line","column","queryExtractionGraphQLError","componentPath","forEach","def","name","value","set","compilerContext","GraphQLCompilerContext","addAll","ASTConvert","convertASTDocuments","RelayParser","transform","bind","formattedMessage","docName","codeBlock","get","structuredError","printContext","slice","ctx","fragments","node","kind","has","otherNode","text","getRoot","GraphQLIRPrinter","print","regex","str","toString","m","fragmentName","exec","index","lastIndex","closestFragment","f","fragment","score","sort","a","b","id","context","query","originalText","isHook","isStaticQuery","hash","kebabCase","relative","program","directory","NODE_ENV","useContext","compile","runner","queries"],"mappings":";;;;;;;;;;AACA;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAEA;;AACA;;AACA;;AAKA;;AACA;;AAtBA,MAAMA,SAAS,GAAGC,OAAO,CAAE,gBAAF,CAAzB;;AAEA,MAAMC,WAAW,GAAGD,OAAO,CAAE,kBAAF,CAA3B;;AAQA,MAAME,CAAC,GAAGF,OAAO,CAAE,QAAF,CAAjB;;AAGA,MAAM;AAAEG,EAAAA;AAAF,IAA0BH,OAAO,CAAE,kBAAF,CAAvC;;AAUA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAE,4BAAF,CAAhC;;AAIA,MAAM;AAAEK,EAAAA;AAAF,IAAsBC,2BAA5B;;AAEA,MAAM;AACJC,EAAAA,uBADI;AAEJC,EAAAA,6BAFI;AAGJC,EAAAA,kBAHI;AAIJC,EAAAA,0BAJI;AAKJC,EAAAA,2BALI;AAMJC,EAAAA,eANI;AAOJC,EAAAA,0BAPI;AAQJC,EAAAA;AARI,IASFd,OAAO,CAAE,SAAF,CATX;;AAsBA,MAAMe,eAAe,GAAG,CACtBR,uBADsB,EAEtBC,6BAFsB,EAGtBC,kBAHsB,EAItBC,0BAJsB,EAKtBC,2BALsB,EAMtBC,eANsB,EAOtBC,0BAPsB,EAQtBC,8BARsB,CAAxB;AAWA,IAAIE,gBAAgB,GAAG,IAAvB;AACA,MAAMC,cAAc,GAAI,kBAAxB;;AAEA,MAAMC,aAAa,GAAG,CAACC,MAAM,GAAG,EAAV,KACpBA,MAAM,CAACC,MAAP,CAAc,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC/BD,EAAAA,MAAM,CAACE,IAAP,CAAYD,KAAK,CAACE,QAAlB;AACA,SAAOH,MAAP;AACD,CAHD,EAGG,EAHH,CADF;;;;AAMA,MAAMI,MAAN,CAAa;AAOXC,EAAAA,WAAW,CAACC,IAAD,EAAeC,UAAf,EAAqCC,MAArC,EAA4D;AAAA;AAAA;AAAA;AAAA;AAAA;AACrE,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMC,iBAAiB,GAAI,GAAEC,kBAAOC,MAAP,CAAcC,GAAd,CAAmB,eAAnB,CAAmC,IAAGJ,OAAQ,EAA3E;;AACA,QAAIK,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,SAA9C,EAAwD;AACtDlC,MAAAA,gBAAgB,CAACmC,SAAjB,CAA2BtB,cAA3B,EAA2Ce,iBAA3C;AACAhB,MAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AAED,QAAMwB,UAAN,GAAmB;AACjB,QAAIC,KAAK,GAAG,MAAM,KAAKC,eAAL,EAAlB;AACA,WAAO,MAAM,KAAKC,KAAL,CAAWF,KAAX,CAAb;AACD;;AAED,QAAMC,eAAN,GAAwB;AACtB,UAAME,UAAU,GAAGC,cAAKC,IAAL,CAAW,KAAX,EAAkB,eAAlB,CAAnB;;AACA,QAAIC,KAAK,GAAG,CACVF,cAAKC,IAAL,CAAU,KAAKnB,IAAf,EAAsB,KAAtB,CADU,EAEVkB,cAAKC,IAAL,CAAU,KAAKnB,IAAf,EAAsB,QAAtB,EAAgC,WAAhC,CAFU,EAITqB,MAJS,CAIF,KAAKpB,UAAL,CAAgBqB,GAAhB,CAAoBrB,UAAU,IAAIiB,cAAKC,IAAL,CAAUlB,UAAV,EAAuB,KAAvB,CAAlC,CAJE,EAKTR,MALS,CAMR,CAACC,MAAD,EAAS6B,UAAT,KACE7B,MAAM,CAAC2B,MAAP,CACEG,cAAKC,IAAL,CAAUP,cAAKC,IAAL,CAAUI,UAAV,EAAsBN,UAAtB,CAAV,EAA6C;AAC3CS,MAAAA,KAAK,EAAE;AADoC,KAA7C,CADF,CAPM,EAYR,EAZQ,CAAZ;AAcAN,IAAAA,KAAK,GAAGA,KAAK,CAACO,MAAN,CAAaC,CAAC,IAAI,CAACA,CAAC,CAACC,KAAF,CAAQ,UAAR,CAAnB,CAAR;AACAT,IAAAA,KAAK,GAAGA,KAAK,CAACE,GAAN,CAAUlD,SAAV,CAAR,CAjBsB,CAmBtB;AACA;AACA;AACA;AACA;AACA;;AACAgD,IAAAA,KAAK,GAAGA,KAAK,CAACC,MAAN,CACNS,KAAK,CAACC,IAAN,CAAWC,aAAMC,QAAN,GAAiBC,UAAjB,CAA4BC,IAA5B,EAAX,EAA+CC,CAAC,IAAIhE,SAAS,CAACgE,CAAD,CAA7D,CADM,CAAR;AAGAhB,IAAAA,KAAK,GAAG7C,CAAC,CAAC8D,IAAF,CAAOjB,KAAP,CAAR;AAEA,QAAIkB,MAAM,GAAG,IAAIC,mBAAJ,EAAb;AAEA,WAAO,MAAMD,MAAM,CAACE,UAAP,CAAkBpB,KAAlB,CAAb;AACD;;AAED,QAAMJ,KAAN,CAAYF,KAAZ,EAAgE;AAC9D,UAAM2B,aAAsB,GAAG,IAAIC,GAAJ,EAA/B;AACA,UAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;AACA,UAAME,UAAU,GAAG,IAAIF,GAAJ,EAAnB;AACA,UAAMG,YAAY,GAAG,IAAIH,GAAJ,EAArB;AACA,UAAMI,SAAS,GAAG,EAAlB;;AAEA,SAAK,IAAI,CAACC,QAAD,EAAWC,GAAX,CAAT,IAA4BlC,KAAK,CAACmC,OAAN,EAA5B,EAA6C;AAC3C,UAAIC,MAAM,GAAG,uBAAS,KAAKhD,MAAd,EAAsB8C,GAAtB,EAA2B5D,eAA3B,CAAb;;AAEA,UAAI8D,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,cAAMC,gCAAgC,GAAGJ,GAAG,CAACK,WAAJ,CAAgB,CAAhB,EAAmBC,WAA5D;;AAEAhD,0BAAOiD,YAAP,CACEL,MAAM,CAAC5B,GAAP,CAAWkC,KAAK,IAAI;AAClB,gBAAMC,eAAe,GAAGD,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAAxB,CADkB,CAElB;;AACA,gBAAMC,QAAQ,GAAG;AACfC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EACFJ,eAAe,CAACI,IAAhB,GACAT,gCAAgC,CAACQ,KAAjC,CAAuCC,IADvC,GAEA,CAJG;AAKLC,cAAAA,MAAM,EACJ,CAACL,eAAe,CAACI,IAAhB,KAAyB,CAAzB,GACGT,gCAAgC,CAACQ,KAAjC,CAAuCE,MAAvC,GAAgD,CADnD,GAEG,CAFJ,IAESL,eAAe,CAACK;AARtB;AADQ,WAAjB;AAYA,iBAAO,0BAAY;AAAE1D,YAAAA,OAAO,EAAEoD,KAAK,CAACpD,OAAjB;AAA0B2C,YAAAA,QAA1B;AAAoCY,YAAAA;AAApC,WAAZ,CAAP;AACD,SAhBD,CADF;;AAoBA,aAAKxD,WAAL,CAAiB,2CAAuB+C,MAAvB,EAA+BH,QAA/B,CAAjB;AACAvE,QAAAA,mBAAmB,CAACuF,2BAApB,CAAgD;AAC9CC,UAAAA,aAAa,EAAEjB;AAD+B,SAAhD;AAGA,eAAON,aAAP;AACD;;AAEDK,MAAAA,SAAS,CAAClD,IAAV,CAAeoD,GAAf;AACAA,MAAAA,GAAG,CAACK,WAAJ,CAAgBY,OAAhB,CAAyBC,GAAD,IAAc;AACpC,cAAMC,IAAY,GAAGD,GAAG,CAACC,IAAJ,CAASC,KAA9B;AACAzB,QAAAA,WAAW,CAAC0B,GAAZ,CAAgBF,IAAhB,EAAsBpB,QAAtB;AACAH,QAAAA,UAAU,CAACyB,GAAX,CAAeF,IAAf,EAAqBD,GAArB;AACD,OAJD;AAKD;;AAED,QAAII,eAAe,GAAG,IAAIC,+BAAJ,CAA2B,KAAKrE,MAAhC,CAAtB;;AACA,QAAI;AACFoE,MAAAA,eAAe,GAAGA,eAAe,CAACE,MAAhB,CAChBC,oBAAWC,mBAAX,CACE,KAAKxE,MADP,EAEE4C,SAFF,EAGE1D,eAHF,EAIEuF,qBAAYC,SAAZ,CAAsBC,IAAtB,CAA2BF,oBAA3B,CAJF,CADgB,CAAlB;AAQD,KATD,CASE,OAAOnB,KAAP,EAAc;AACd,YAAM;AAAEsB,QAAAA,gBAAF;AAAoBC,QAAAA,OAApB;AAA6B3E,QAAAA,OAA7B;AAAsC4E,QAAAA;AAAtC,UAAoD,iCACxDrC,WADwD,EAExDC,UAFwD,EAGxDY,KAHwD,CAA1D;AAKAX,MAAAA,YAAY,CAACwB,GAAb,CAAiBU,OAAjB,EAA0B;AAAED,QAAAA,gBAAF;AAAoB1E,QAAAA,OAApB;AAA6B4E,QAAAA;AAA7B,OAA1B;AACAxG,MAAAA,mBAAmB,CAACuF,2BAApB,CAAgD;AAC9CC,QAAAA,aAAa,EAAErB,WAAW,CAACsC,GAAZ,CAAgBF,OAAhB,CAD+B;AAE9CvB,QAAAA,KAAK,EAAEsB;AAFuC,OAAhD;AAKA,YAAM/B,QAAQ,GAAGJ,WAAW,CAACsC,GAAZ,CAAgBF,OAAhB,CAAjB;AACA,YAAMG,eAAe,GAAG,0BAAY;AAAE9E,QAAAA,OAAF;AAAW2C,QAAAA;AAAX,OAAZ,CAAxB;;AACAzC,wBAAOiD,YAAP,CAAoB2B,eAApB,EAdc,CAgBd;AACA;;;AACA,WAAK/E,WAAL,CAAiB2E,gBAAjB;AAEA,aAAO,KAAP;AACD,KA/E6D,CAiF9D;AACA;AACA;AACA;AACA;;;AACA,UAAMK,YAAY,GAAGzG,eAAe,CACjC0G,KADkB,CACZ,CADY,EACT,CAAC,CADQ,EAElB3F,MAFkB,CAEX,CAAC4F,GAAD,EAAMT,SAAN,KAAoBA,SAAS,CAACS,GAAD,EAAM,KAAKnF,MAAX,CAFlB,EAEsCoE,eAFtC,CAArB;AAIA,UAAMgB,SAAS,GAAG,EAAlB;AACAhB,IAAAA,eAAe,CAACxB,SAAhB,GAA4BmB,OAA5B,CAAoCsB,IAAI,IAAI;AAC1C,UAAIA,IAAI,CAACC,IAAL,KAAe,UAAnB,EAA8B;AAC5BF,QAAAA,SAAS,CAAC1F,IAAV,CAAe2F,IAAI,CAACpB,IAApB;AACD;AACF,KAJD;AAMAG,IAAAA,eAAe,CAACxB,SAAhB,GAA4BmB,OAA5B,CAAqCsB,IAAD,IAA4B;AAC9D,UAAIA,IAAI,CAACC,IAAL,KAAe,MAAnB,EAA0B;AAC1B,YAAM;AAAErB,QAAAA;AAAF,UAAWoB,IAAjB;AACA,UAAIxC,QAAQ,GAAGJ,WAAW,CAACsC,GAAZ,CAAgBd,IAAhB,KAA0B,EAAzC;;AACA,UAAI1B,aAAa,CAACgD,GAAd,CAAkB1C,QAAlB,CAAJ,EAAiC;AAC/B,YAAI2C,SAAS,GAAGjD,aAAa,CAACwC,GAAd,CAAkBlC,QAAlB,CAAhB;AACA,aAAK5C,WAAL,CACE,6CACE4C,QADF,EAEEH,UAAU,CAACqC,GAAX,CAAed,IAAf,CAFF,EAGEuB,SAAS,IAAI9C,UAAU,CAACqC,GAAX,CAAeS,SAAS,CAACvB,IAAzB,CAHf,CADF;AAOA3F,QAAAA,mBAAmB,CAACuF,2BAApB,CAAgD;AAC9CC,UAAAA,aAAa,EAAEjB;AAD+B,SAAhD;AAGA;AACD;;AACD,UAAI4C,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,GAAG,mCAAqBR,YAAY,CAACS,OAAb,CAAqBzB,IAArB,CAArB,EAAiDgB,YAAjD,EACJrC,SADI,GAEJxB,GAFI,CAEAuE,0BAAiBC,KAFjB,EAGJ3E,IAHI,CAGE,IAHF,CAAP;AAID,OALD,CAKE,OAAOqC,KAAP,EAAc;AAAA;;AACd,cAAMuC,KAAK,GAAG,6BAAd;AACA,cAAMC,GAAG,GAAGxC,KAAK,CAACyC,QAAN,EAAZ;AACA,YAAIC,CAAJ;AAEA,YAAIC,YAAJ;;AACA,eAAO,CAACD,CAAC,GAAGH,KAAK,CAACK,IAAN,CAAWJ,GAAX,CAAL,MAA0B,IAAjC,EAAuC;AACrC;AACA,cAAIE,CAAC,CAACG,KAAF,KAAYN,KAAK,CAACO,SAAtB,EAAiCP,KAAK,CAACO,SAAN;AAEjCH,UAAAA,YAAY,GAAGD,CAAC,CAAC,CAAD,CAAhB;AACD;;AAED,cAAMK,eAAe,4BAAGjB,SAAS,CAC9BhE,GADqB,CACjBkF,CAAC,IAAI;AACR,iBAAO;AAAEC,YAAAA,QAAQ,EAAED,CAAZ;AAAeE,YAAAA,KAAK,EAAEpI,WAAW,CAAC2G,GAAZ,CAAgBkB,YAAhB,EAA8BK,CAA9B;AAAtB,WAAP;AACD,SAHqB,EAIrB7E,MAJqB,CAId6E,CAAC,IAAIA,CAAC,CAACE,KAAF,GAAU,EAJD,EAKrBC,IALqB,CAKhB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KALN,EAKa,CALb,CAAH,0DAAG,sBAKiBD,QALzC;;AAOAnG,0BAAOiD,YAAP,CAAoB;AAClBuD,UAAAA,EAAE,EAAG,OADa;AAElB/D,UAAAA,QAFkB;AAGlBgE,UAAAA,OAAO,EAAE;AAAEZ,YAAAA,YAAF;AAAgBI,YAAAA;AAAhB;AAHS,SAApB;AAKD;;AAED,YAAMS,KAAK,GAAG;AACZ7C,QAAAA,IADY;AAEZwB,QAAAA,IAFY;AAGZsB,QAAAA,YAAY,EAAErE,UAAU,CAACqC,GAAX,CAAed,IAAf,EAAqBwB,IAHvB;AAIZzE,QAAAA,IAAI,EAAE6B,QAJM;AAKZmE,QAAAA,MAAM,EAAEtE,UAAU,CAACqC,GAAX,CAAed,IAAf,EAAqB+C,MALjB;AAMZC,QAAAA,aAAa,EAAEvE,UAAU,CAACqC,GAAX,CAAed,IAAf,EAAqBgD,aANxB;AAOZC,QAAAA,IAAI,EAAExE,UAAU,CAACqC,GAAX,CAAed,IAAf,EAAqBiD;AAPf,OAAd;;AAUA,UAAIJ,KAAK,CAACG,aAAV,EAAyB;AACvBH,QAAAA,KAAK,CAACF,EAAN,GACG,MAAD,GACAvI,CAAC,CAAC8I,SAAF,CACG,GAAEnG,cAAKoG,QAAL,CAActF,aAAMC,QAAN,GAAiBsF,OAAjB,CAAyBC,SAAvC,EAAkDzE,QAAlD,CAA4D,EADjE,CAFF;AAKD;;AAED,UACEiE,KAAK,CAACE,MAAN,IACAzG,OAAO,CAACC,GAAR,CAAY+G,QAAZ,KAA0B,YAD1B,IAEA,OAAOpJ,OAAO,CAAE,OAAF,CAAP,CAAiBqJ,UAAxB,KAAwC,UAH1C,EAIE;AACApH,0BAAOiD,YAAP,CACG,qEAAD,GACG,qFAFL;AAID;;AAEDd,MAAAA,aAAa,CAAC4B,GAAd,CAAkBtB,QAAlB,EAA4BiE,KAA5B;AACD,KAjFD;;AAmFA,QACEvG,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,SAA1C,IACAtB,gBAFF,EAGE;AACAZ,MAAAA,gBAAgB,CAACmC,SAAjB,CAA2BtB,cAA3B,EAA2C,IAA3C;AACAD,MAAAA,gBAAgB,GAAG,KAAnB;AACD;;AAED,WAAOoD,aAAP;AACD;;AA1PU;;;;AA8PE,eAAekF,OAAf,GAA0D;AACvE;AACA,QAAM;AAAEJ,IAAAA,OAAF;AAAWrH,IAAAA,MAAX;AAAmBV,IAAAA;AAAnB,MAA8BwC,aAAMC,QAAN,EAApC;;AAEA,QAAM2F,MAAM,GAAG,IAAI9H,MAAJ,CACbyH,OAAO,CAACC,SADK,EAEbjI,aAAa,CAACC,MAAM,CAACA,MAAR,CAFA,EAGbU,MAHa,CAAf;AAMA,QAAM2H,OAAO,GAAG,MAAMD,MAAM,CAAC/G,UAAP,EAAtB;AAEA,SAAOgH,OAAP;AACD","sourcesContent":["// @flow\nimport path from \"path\"\nconst normalize = require(`normalize-path`)\nimport glob from \"glob\"\nconst levenshtein = require(`fast-levenshtein`)\n\nimport { validate } from \"graphql\"\nimport { IRTransforms } from \"@gatsbyjs/relay-compiler\"\nimport RelayParser from \"@gatsbyjs/relay-compiler/lib/RelayParser\"\nimport ASTConvert from \"@gatsbyjs/relay-compiler/lib/ASTConvert\"\nimport GraphQLCompilerContext from \"@gatsbyjs/relay-compiler/lib/GraphQLCompilerContext\"\nimport filterContextForNode from \"@gatsbyjs/relay-compiler/lib/filterContextForNode\"\nconst _ = require(`lodash`)\n\nimport { store } from \"../redux\"\nconst { boundActionCreators } = require(`../redux/actions`)\nimport FileParser from \"./file-parser\"\nimport GraphQLIRPrinter from \"@gatsbyjs/relay-compiler/lib/GraphQLIRPrinter\"\nimport {\n  graphqlError,\n  graphqlValidationError,\n  multipleRootQueriesError,\n} from \"./graphql-errors\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport errorParser from \"./error-parser\"\nconst websocketManager = require(`../utils/websocket-manager`)\n\nimport type { DocumentNode, GraphQLSchema } from \"graphql\"\n\nconst { printTransforms } = IRTransforms\n\nconst {\n  ValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\ntype RootQuery = {\n  name: string,\n  path: string,\n  text: string,\n  originalText: string,\n  isStaticQuery: boolean,\n  hash: string,\n}\n\ntype Queries = Map<string, RootQuery>\n\nconst validationRules = [\n  ValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n]\n\nlet lastRunHadErrors = null\nconst overlayErrorID = `graphql-compiler`\n\nconst resolveThemes = (themes = []) =>\n  themes.reduce((merged, theme) => {\n    merged.push(theme.themeDir)\n    return merged\n  }, [])\n\nclass Runner {\n  base: string\n  additional: string[]\n  schema: GraphQLSchema\n  errors: string[]\n  fragmentsDir: string\n\n  constructor(base: string, additional: string[], schema: GraphQLSchema) {\n    this.base = base\n    this.additional = additional\n    this.schema = schema\n  }\n\n  reportError(message) {\n    const queryErrorMessage = `${report.format.red(`GraphQL Error`)} ${message}`\n    if (process.env.gatsby_executing_command === `develop`) {\n      websocketManager.emitError(overlayErrorID, queryErrorMessage)\n      lastRunHadErrors = true\n    }\n  }\n\n  async compileAll() {\n    let nodes = await this.parseEverything()\n    return await this.write(nodes)\n  }\n\n  async parseEverything() {\n    const filesRegex = path.join(`/**`, `*.+(t|j)s?(x)`)\n    let files = [\n      path.join(this.base, `src`),\n      path.join(this.base, `.cache`, `fragments`),\n    ]\n      .concat(this.additional.map(additional => path.join(additional, `src`)))\n      .reduce(\n        (merged, folderPath) =>\n          merged.concat(\n            glob.sync(path.join(folderPath, filesRegex), {\n              nodir: true,\n            })\n          ),\n        []\n      )\n    files = files.filter(d => !d.match(/\\.d\\.ts$/))\n    files = files.map(normalize)\n\n    // Ensure all page components added as they're not necessarily in the\n    // pages directory e.g. a plugin could add a page component.  Plugins\n    // *should* copy their components (if they add a query) to .cache so that\n    // our babel plugin to remove the query on building is active (we don't\n    // run babel on code in node_modules). Otherwise the component will throw\n    // an error in the browser of \"graphql is not defined\".\n    files = files.concat(\n      Array.from(store.getState().components.keys(), c => normalize(c))\n    )\n    files = _.uniq(files)\n\n    let parser = new FileParser()\n\n    return await parser.parseFiles(files)\n  }\n\n  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {\n    const compiledNodes: Queries = new Map()\n    const namePathMap = new Map()\n    const nameDefMap = new Map()\n    const nameErrorMap = new Map()\n    const documents = []\n\n    for (let [filePath, doc] of nodes.entries()) {\n      let errors = validate(this.schema, doc, validationRules)\n\n      if (errors && errors.length) {\n        const locationOfGraphQLDocInSourceFile = doc.definitions[0].templateLoc\n\n        report.panicOnBuild(\n          errors.map(error => {\n            const graphqlLocation = error.locations[0]\n            // get location of error relative to soure file (not just graphql text)\n            const location = {\n              start: {\n                line:\n                  graphqlLocation.line +\n                  locationOfGraphQLDocInSourceFile.start.line -\n                  1,\n                column:\n                  (graphqlLocation.line === 0\n                    ? locationOfGraphQLDocInSourceFile.start.column - 1\n                    : 0) + graphqlLocation.column,\n              },\n            }\n            return errorParser({ message: error.message, filePath, location })\n          })\n        )\n\n        this.reportError(graphqlValidationError(errors, filePath))\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        return compiledNodes\n      }\n\n      documents.push(doc)\n      doc.definitions.forEach((def: any) => {\n        const name: string = def.name.value\n        namePathMap.set(name, filePath)\n        nameDefMap.set(name, def)\n      })\n    }\n\n    let compilerContext = new GraphQLCompilerContext(this.schema)\n    try {\n      compilerContext = compilerContext.addAll(\n        ASTConvert.convertASTDocuments(\n          this.schema,\n          documents,\n          validationRules,\n          RelayParser.transform.bind(RelayParser)\n        )\n      )\n    } catch (error) {\n      const { formattedMessage, docName, message, codeBlock } = graphqlError(\n        namePathMap,\n        nameDefMap,\n        error\n      )\n      nameErrorMap.set(docName, { formattedMessage, message, codeBlock })\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: namePathMap.get(docName),\n        error: formattedMessage,\n      })\n\n      const filePath = namePathMap.get(docName)\n      const structuredError = errorParser({ message, filePath })\n      report.panicOnBuild(structuredError)\n\n      // report error to browser\n      // TODO: move browser error overlay reporting to reporter\n      this.reportError(formattedMessage)\n\n      return false\n    }\n\n    // relay-compiler v1.5.0 added \"StripUnusedVariablesTransform\" to\n    // printTransforms. Unfortunately it currently doesn't detect variables\n    // in input objects widely used in gatsby, and therefore removing\n    // variable declaration from queries.\n    // As a temporary workaround remove that transform by slicing printTransforms.\n    const printContext = printTransforms\n      .slice(0, -1)\n      .reduce((ctx, transform) => transform(ctx, this.schema), compilerContext)\n\n    const fragments = []\n    compilerContext.documents().forEach(node => {\n      if (node.kind === `Fragment`) {\n        fragments.push(node.name)\n      }\n    })\n\n    compilerContext.documents().forEach((node: { name: string }) => {\n      if (node.kind !== `Root`) return\n      const { name } = node\n      let filePath = namePathMap.get(name) || ``\n      if (compiledNodes.has(filePath)) {\n        let otherNode = compiledNodes.get(filePath)\n        this.reportError(\n          multipleRootQueriesError(\n            filePath,\n            nameDefMap.get(name),\n            otherNode && nameDefMap.get(otherNode.name)\n          )\n        )\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        return\n      }\n      let text\n      try {\n        text = filterContextForNode(printContext.getRoot(name), printContext)\n          .documents()\n          .map(GraphQLIRPrinter.print)\n          .join(`\\n`)\n      } catch (error) {\n        const regex = /Unknown\\sdocument\\s`(.*)`/gm\n        const str = error.toString()\n        let m\n\n        let fragmentName\n        while ((m = regex.exec(str)) !== null) {\n          // This is necessary to avoid infinite loops with zero-width matches\n          if (m.index === regex.lastIndex) regex.lastIndex++\n\n          fragmentName = m[1]\n        }\n\n        const closestFragment = fragments\n          .map(f => {\n            return { fragment: f, score: levenshtein.get(fragmentName, f) }\n          })\n          .filter(f => f.score < 10)\n          .sort((a, b) => a.score > b.score)[0]?.fragment\n\n        report.panicOnBuild({\n          id: `85908`,\n          filePath,\n          context: { fragmentName, closestFragment },\n        })\n      }\n\n      const query = {\n        name,\n        text,\n        originalText: nameDefMap.get(name).text,\n        path: filePath,\n        isHook: nameDefMap.get(name).isHook,\n        isStaticQuery: nameDefMap.get(name).isStaticQuery,\n        hash: nameDefMap.get(name).hash,\n      }\n\n      if (query.isStaticQuery) {\n        query.id =\n          `sq--` +\n          _.kebabCase(\n            `${path.relative(store.getState().program.directory, filePath)}`\n          )\n      }\n\n      if (\n        query.isHook &&\n        process.env.NODE_ENV === `production` &&\n        typeof require(`react`).useContext !== `function`\n      ) {\n        report.panicOnBuild(\n          `You're likely using a version of React that doesn't support Hooks\\n` +\n            `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n        )\n      }\n\n      compiledNodes.set(filePath, query)\n    })\n\n    if (\n      process.env.gatsby_executing_command === `develop` &&\n      lastRunHadErrors\n    ) {\n      websocketManager.emitError(overlayErrorID, null)\n      lastRunHadErrors = false\n    }\n\n    return compiledNodes\n  }\n}\nexport { Runner, resolveThemes }\n\nexport default async function compile(): Promise<Map<string, RootQuery>> {\n  // TODO: swap plugins to themes\n  const { program, schema, themes } = store.getState()\n\n  const runner = new Runner(\n    program.directory,\n    resolveThemes(themes.themes),\n    schema\n  )\n\n  const queries = await runner.compileAll()\n\n  return queries\n}\n"],"file":"query-compiler.js"}